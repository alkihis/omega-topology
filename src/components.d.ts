/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  D3GraphBase,
  D3Link,
  D3Node,
  MakeGraphEvent,
  PruneAddProperty,
  PruneDeleteProperty,
  TrimProperties,
} from './utils/types';
import {
  UniprotProtein,
} from 'omega-topology-fullstack/build/UniprotContainer';
import {
  PSQData,
} from 'omega-topology-fullstack';
import {
  SubNode,
  TreeLike,
} from '@mmsb/selectionnable-tree';

export namespace Components {
  interface OmegaDownload {}
  interface OmegaGraph {
    'downloadGraphAs': (file_name: string, type?: string) => Promise<void>;
    'downloadGraphAsImage': (image_name?: string | CustomEvent<any>) => Promise<void>;
    'downloadGraphAsJSON': (name?: string | CustomEvent<any>) => Promise<void>;
    'downloadGraphAsTab': (name?: string | CustomEvent<any>) => Promise<void>;
    'getLinksOf': (id: string) => Promise<any>;
    'getNode': (id: string) => Promise<any>;
    'highlightNode': (...node_ids: string[]) => Promise<void>;
    /**
    * Construction d'un graphe, en utilisant ForceGraph3D.  Capable de recevoir un *CustomEvent* doté une propriété *detail* contenant un objet, possédant une propriété *graph_base* de type `D3GraphBase` (type `MakeGraphEvent`).  Il est possible de directement passer un object implémentant `D3GraphBase` à cette fonction, qui construira le graphe en conséquence.
    */
    'make3dGraph': (data: CustomEvent<{ graph_base: D3GraphBase; }> | D3GraphBase) => Promise<void>;
    'removeHighlighting': (...node_ids: string[]) => Promise<void>;
    'removeHighlightingRegex': (matcher: RegExp) => Promise<void>;
    'removeNode': (...removed_nodes: (string | RegExp | D3Node)[]) => Promise<void>;
    'resetHighlighting': () => Promise<void>;
    /**
    * Serialize graph into a string using a custom function.
    */
    'serialize': <T, R = string>(encoder: (link: D3Link, node1: D3Node, node2: D3Node, accumulator?: T) => T, finalize_function?: (composed: T) => R) => Promise<string | R>;
    /**
    * Espèce modélisée par le graphe
    */
    'specie': string;
    'toJSON': () => Promise<string>;
    'toTabular': () => Promise<string>;
  }
  interface OmegaMitabCard {
    'data': D3Link;
    'hide': () => Promise<void>;
    'preload': () => Promise<void>;
    'show': () => Promise<void>;
  }
  interface OmegaOnto {
    'getData': () => Promise<TreeLike[]>;
    'setData': (d: SubNode) => Promise<void>;
    'unsetData': () => Promise<void>;
  }
  interface OmegaPrune {}
  interface OmegaReheat {}
  interface OmegaReset {}
  interface OmegaTabs {}
  interface OmegaTaxo {
    'getData': () => Promise<TreeLike[]>;
    'setData': (d: SubNode) => Promise<void>;
    'unsetData': () => Promise<void>;
  }
  interface OmegaTrim {
    'fix_at'?: {
      identity?: string,
      coverage?: string,
      similarity?: string,
      e_value?: string
    };
    'similarity': string;
  }
  interface OmegaUniprotCard {
    'data': UniprotProtein;
    'hide': () => Promise<void>;
    'preload': () => Promise<void>;
    'show': () => Promise<void>;
  }
}

declare global {


  interface HTMLOmegaDownloadElement extends Components.OmegaDownload, HTMLStencilElement {}
  var HTMLOmegaDownloadElement: {
    prototype: HTMLOmegaDownloadElement;
    new (): HTMLOmegaDownloadElement;
  };

  interface HTMLOmegaGraphElement extends Components.OmegaGraph, HTMLStencilElement {}
  var HTMLOmegaGraphElement: {
    prototype: HTMLOmegaGraphElement;
    new (): HTMLOmegaGraphElement;
  };

  interface HTMLOmegaMitabCardElement extends Components.OmegaMitabCard, HTMLStencilElement {}
  var HTMLOmegaMitabCardElement: {
    prototype: HTMLOmegaMitabCardElement;
    new (): HTMLOmegaMitabCardElement;
  };

  interface HTMLOmegaOntoElement extends Components.OmegaOnto, HTMLStencilElement {}
  var HTMLOmegaOntoElement: {
    prototype: HTMLOmegaOntoElement;
    new (): HTMLOmegaOntoElement;
  };

  interface HTMLOmegaPruneElement extends Components.OmegaPrune, HTMLStencilElement {}
  var HTMLOmegaPruneElement: {
    prototype: HTMLOmegaPruneElement;
    new (): HTMLOmegaPruneElement;
  };

  interface HTMLOmegaReheatElement extends Components.OmegaReheat, HTMLStencilElement {}
  var HTMLOmegaReheatElement: {
    prototype: HTMLOmegaReheatElement;
    new (): HTMLOmegaReheatElement;
  };

  interface HTMLOmegaResetElement extends Components.OmegaReset, HTMLStencilElement {}
  var HTMLOmegaResetElement: {
    prototype: HTMLOmegaResetElement;
    new (): HTMLOmegaResetElement;
  };

  interface HTMLOmegaTabsElement extends Components.OmegaTabs, HTMLStencilElement {}
  var HTMLOmegaTabsElement: {
    prototype: HTMLOmegaTabsElement;
    new (): HTMLOmegaTabsElement;
  };

  interface HTMLOmegaTaxoElement extends Components.OmegaTaxo, HTMLStencilElement {}
  var HTMLOmegaTaxoElement: {
    prototype: HTMLOmegaTaxoElement;
    new (): HTMLOmegaTaxoElement;
  };

  interface HTMLOmegaTrimElement extends Components.OmegaTrim, HTMLStencilElement {}
  var HTMLOmegaTrimElement: {
    prototype: HTMLOmegaTrimElement;
    new (): HTMLOmegaTrimElement;
  };

  interface HTMLOmegaUniprotCardElement extends Components.OmegaUniprotCard, HTMLStencilElement {}
  var HTMLOmegaUniprotCardElement: {
    prototype: HTMLOmegaUniprotCardElement;
    new (): HTMLOmegaUniprotCardElement;
  };
  interface HTMLElementTagNameMap {
    'omega-download': HTMLOmegaDownloadElement;
    'omega-graph': HTMLOmegaGraphElement;
    'omega-mitab-card': HTMLOmegaMitabCardElement;
    'omega-onto': HTMLOmegaOntoElement;
    'omega-prune': HTMLOmegaPruneElement;
    'omega-reheat': HTMLOmegaReheatElement;
    'omega-reset': HTMLOmegaResetElement;
    'omega-tabs': HTMLOmegaTabsElement;
    'omega-taxo': HTMLOmegaTaxoElement;
    'omega-trim': HTMLOmegaTrimElement;
    'omega-uniprot-card': HTMLOmegaUniprotCardElement;
  }
}

declare namespace LocalJSX {
  interface OmegaDownload extends JSXBase.HTMLAttributes<HTMLOmegaDownloadElement> {
    'onOmega-download.download'?: (event: CustomEvent<string>) => void;
    'onOmega-download.download-as-file'?: (event: CustomEvent<string>) => void;
    'onOmega-download.download-as-json'?: (event: CustomEvent<string>) => void;
  }
  interface OmegaGraph extends JSXBase.HTMLAttributes<HTMLOmegaGraphElement> {
    'onOmega-graph.load-link'?: (event: CustomEvent<D3Link>) => void;
    'onOmega-graph.load-protein'?: (event: CustomEvent<Promise<UniprotProtein>>) => void;
    'onOmega-graph.rebuild'?: (event: CustomEvent<void>) => void;
    'onOmega-graph.rebuild_onto'?: (event: CustomEvent<string[]>) => void;
    'onOmega-graph.rebuild_taxo'?: (event: CustomEvent<string[]>) => void;
    'onPrune-add-node'?: (event: CustomEvent<PruneAddProperty>) => void;
    'onPrune-delete-node'?: (event: CustomEvent<PruneDeleteProperty>) => void;
    'onPrune-reset-nodes'?: (event: CustomEvent<void>) => void;
    /**
    * Espèce modélisée par le graphe
    */
    'specie'?: string;
  }
  interface OmegaMitabCard extends JSXBase.HTMLAttributes<HTMLOmegaMitabCardElement> {
    'data'?: D3Link;
    'onOmega-mitab-card.hover-off'?: (event: CustomEvent<void>) => void;
    'onOmega-mitab-card.hover-on'?: (event: CustomEvent<D3Link>) => void;
  }
  interface OmegaOnto extends JSXBase.HTMLAttributes<HTMLOmegaOntoElement> {
    'onOmega-onto.trim'?: (event: CustomEvent<string[]>) => void;
  }
  interface OmegaPrune extends JSXBase.HTMLAttributes<HTMLOmegaPruneElement> {
    'onPrune-end-select-nodes'?: (event: CustomEvent<void>) => void;
    'onPrune-select-nodes'?: (event: CustomEvent<void>) => void;
  }
  interface OmegaReheat extends JSXBase.HTMLAttributes<HTMLOmegaReheatElement> {
    'onOmega-reheat.reheat'?: (event: CustomEvent<void>) => void;
  }
  interface OmegaReset extends JSXBase.HTMLAttributes<HTMLOmegaResetElement> {
    'onOmega-reset.reset'?: (event: CustomEvent<void>) => void;
  }
  interface OmegaTabs extends JSXBase.HTMLAttributes<HTMLOmegaTabsElement> {}
  interface OmegaTaxo extends JSXBase.HTMLAttributes<HTMLOmegaTaxoElement> {
    'onOmega-taxo.trim'?: (event: CustomEvent<string[]>) => void;
  }
  interface OmegaTrim extends JSXBase.HTMLAttributes<HTMLOmegaTrimElement> {
    'fix_at'?: {
      identity?: string,
      coverage?: string,
      similarity?: string,
      e_value?: string
    };
    'onTrim-property-change'?: (event: CustomEvent<TrimProperties>) => void;
    'similarity'?: string;
  }
  interface OmegaUniprotCard extends JSXBase.HTMLAttributes<HTMLOmegaUniprotCardElement> {
    'data'?: UniprotProtein;
    'onOmega-uniprot-card.hover-off'?: (event: CustomEvent<void>) => void;
    'onOmega-uniprot-card.hover-on'?: (event: CustomEvent<string>) => void;
  }

  interface IntrinsicElements {
    'omega-download': OmegaDownload;
    'omega-graph': OmegaGraph;
    'omega-mitab-card': OmegaMitabCard;
    'omega-onto': OmegaOnto;
    'omega-prune': OmegaPrune;
    'omega-reheat': OmegaReheat;
    'omega-reset': OmegaReset;
    'omega-tabs': OmegaTabs;
    'omega-taxo': OmegaTaxo;
    'omega-trim': OmegaTrim;
    'omega-uniprot-card': OmegaUniprotCard;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


